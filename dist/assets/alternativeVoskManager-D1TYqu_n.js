const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/vosk-BFWVPcWB.js","assets/index-DRaKA3g8.js","assets/index-o6vI5qPA.css"])))=>i.map(i=>d[i]);
import{_ as i}from"./index-DRaKA3g8.js";class n{constructor(){this.originalFetch=window.fetch,this.blockedRequests=[],this.setupInterceptors()}setupInterceptors(){window.fetch=async(e,t)=>{const l=typeof e=="string"?e:e.url;return this.shouldBlockRequest(l)?(console.warn(`🚫 BLOCKED Vosk download attempt: ${l}`),this.blockedRequests.push({url:l,timestamp:new Date().toISOString()}),new Response(JSON.stringify({error:"External downloads disabled"}),{status:403,statusText:"Forbidden - External downloads disabled",headers:{"Content-Type":"application/json"}})):this.originalFetch.call(window,e,t)};const o=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(e,t,...l){return this.shouldBlockRequest&&this.shouldBlockRequest(t)&&(console.warn(`🚫 BLOCKED XHR Vosk download attempt: ${t}`),t="/models/blocked-external-request"),o.call(this,e,t,...l)}}shouldBlockRequest(o){return o?["alphacephei.com","vosk/models",".tar.gz","downloaded.tar.gz","_models_vosk_model","/vosk/_models","vosk-model-small-en-us-0.15.tar.gz","github.com/alphacep/vosk-api"].some(t=>o.includes(t)):!1}getBlockedRequests(){return this.blockedRequests}restore(){window.fetch=this.originalFetch}}new n;class d{constructor(){this.isReady=!1,this.loadedModel=null,this.vosk=null,this.modelPath="/models/vosk-model-small-en-us-0.15"}async initialize(o=null){try{o&&o("🔒 Network blocking active for external downloads..."),o&&o("🔍 Importing Vosk with compatibility mode...");let e=null;try{e=await i(()=>import("./vosk-BFWVPcWB.js").then(l=>l.v),__vite__mapDeps([0,1,2])),console.log("✅ Direct import successful")}catch(l){console.warn("Direct import failed:",l.message);try{e=await i(()=>import("./vosk-BFWVPcWB.js").then(s=>s.v),__vite__mapDeps([0,1,2])),console.log("✅ Alternative import successful")}catch(s){throw console.warn("Alternative import failed:",s.message),new Error("Unable to import Vosk library")}}this.vosk=e,o&&o("📁 Attempting model load with compatibility settings...");const t=`${window.location.origin}${this.modelPath}`;console.log("Attempting to load model from:",t);try{console.log("Trying standard createModel..."),this.loadedModel=await this.loadModelWithTimeout(e.createModel(t),3e4),console.log("✅ Standard model loading successful")}catch(l){console.warn("Standard model loading failed:",l.message);try{console.log("Trying alternative model loading...");const s={modelUrl:t,wasmPath:"/node_modules/vosk-browser/dist/",sampleRate:16e3};this.loadedModel=await this.loadModelWithTimeout(e.createModel(s),45e3),console.log("✅ Alternative model loading successful")}catch(s){throw console.warn("Alternative model loading failed:",s.message),new Error(`Model loading failed: ${s.message}`)}}return this.isReady=!0,o&&o("✅ Alternative Vosk initialized successfully"),!0}catch(e){throw console.error("Alternative Vosk initialization failed:",e),o&&o(`❌ Alternative Vosk failed: ${e.message}`),this.isReady=!1,this.loadedModel=null,e}}async loadModelWithTimeout(o,e){return new Promise((t,l)=>{const s=setTimeout(()=>{l(new Error(`Model loading timeout (${e/1e3}s)`))},e);o.then(a=>{clearTimeout(s),t(a)},a=>{clearTimeout(s),l(a)})})}async createRecognizer(o=16e3){if(!this.isReady||!this.loadedModel)throw new Error("Alternative Vosk not initialized");try{const e=new this.vosk.KaldiRecognizer(this.loadedModel,o);return{AcceptWaveform:t=>e.AcceptWaveform(t),acceptWaveform:t=>e.AcceptWaveform(t),FinalResult:()=>e.FinalResult(),finalResult:()=>{const t=e.FinalResult();return typeof t=="string"?JSON.parse(t):t},PartialResult:()=>e.PartialResult(),partialResult:()=>{const t=e.PartialResult();return typeof t=="string"?JSON.parse(t):t}}}catch(e){throw console.error("Failed to create alternative recognizer:",e),e}}getModelInfo(){return{loaded:this.isReady,path:this.modelPath,type:"Alternative Vosk Model"}}}const u=new d;export{d as AlternativeVoskManager,u as alternativeVoskManager};
