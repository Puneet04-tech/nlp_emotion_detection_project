const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/vosk-DWs1KvAS.js","assets/index-MBkUkEXy.js","assets/index-o6vI5qPA.css"])))=>i.map(i=>d[i]);
import{_ as a}from"./index-MBkUkEXy.js";const n=async()=>{try{console.log("Testing Vosk availability...");const e=await a(()=>import("./vosk-DWs1KvAS.js").then(l=>l.v),__vite__mapDeps([0,1,2]));return console.log("✅ vosk-browser imported successfully"),console.log("Available functions:",Object.keys(e)),typeof e.createModel=="function"?console.log("✅ createModel function available"):console.log("❌ createModel function not found"),{success:!0,module:e,message:"Vosk library loaded successfully"}}catch(e){return console.error("❌ Vosk test failed:",e),{success:!1,error:e.message,message:"Vosk library not available"}}},d=async()=>{try{const e=await n();if(!e.success)throw new Error(e.message);console.log("Testing model loading...");const l=`${window.location.origin}/models/vosk-model-small-en-us-0.15`;console.log("Model URL:",l);try{const s=await fetch(`${l}/README`);s.ok?console.log("✅ Model directory is accessible"):console.warn("⚠️ Model directory might not be accessible:",s.status)}catch(s){console.warn("⚠️ Could not test model directory accessibility:",s.message)}console.log("⏳ Loading model (this may take up to 60 seconds)...");const c=e.module.createModel(l),t=new Promise((s,r)=>{setTimeout(()=>r(new Error("Model loading timeout (60s)")),6e4)}),o=await Promise.race([c,t]);return console.log("✅ Model loaded successfully"),{success:!0,model:o,message:"Model loaded successfully"}}catch(e){return console.error("❌ Model loading failed:",e),{success:!1,error:e.message,message:"Model loading failed"}}},m=async()=>{try{const l=`${window.location.origin}/models/vosk-model-small-en-us-0.15`;console.log("Testing model files accessibility...");const c=["README","am/final.mdl","conf/model.conf","graph/HCLG.fst"],t={};for(const o of c)try{const s=await fetch(`${l}/${o}`);t[o]={accessible:s.ok,status:s.status,size:s.headers.get("content-length")},console.log(`${s.ok?"✅":"❌"} ${o}: ${s.status} (${t[o].size} bytes)`)}catch(s){t[o]={accessible:!1,error:s.message},console.log(`❌ ${o}: ${s.message}`)}return{success:!0,results:t,message:"Model files accessibility test completed"}}catch(e){return console.error("❌ Model files test failed:",e),{success:!1,error:e.message,message:"Model files test failed"}}};export{m as testModelFiles,d as testModelLoading,n as testVoskAvailability};
